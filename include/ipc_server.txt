Współdzielona pamięć:

    Stan głównej kolejki:

    typedef struct mq_state {
        int main_queue;
        char game_in_progress;
        long game_sid;
        mq_seat_t seats[2];
    } mq_state_t;

    Kolejki wydarzeń (3 w programie, 2 w której gromadzą się wiadomości do wysłania przez proces komunikacji, 1 w której gromadzą się polecenia dla procesu logicznego):

    typedef struct evqueue {
        unsigned int head;
        unsigned int tail;
        sem_t available_semaphore;
        sem_t access_semaphore;
        sem_t free_semaphore;
        evqueue_item_t items[EVQUEUE_CAPACITY];
    } evqueue_t;

    Dane współdzielone pomiędzy podprocesy komponentu logicznego serwera:

    typedef struct game_data {
        player_data_t player0;
        player_data_t player1;
        attack_list_t attacks;
        train_list_t trainings;
        sem_t mutex;
        char start_event_sent;
    } game_data_t;

Semafory:

    - Dla kolejek wydarzeń (evqueue wyżej)
        available_semaphore ilość dostępnych elementów do wyciągnięcia z kolejki (konsument)
        free_semaphore ilość wolnego mijesca na kolejce (producent)
        access_semaphore sekcja krytyczna
    - Dla danych współdzielonych przez podprocesy komponentu logicznego
        mutex - żeby tylko jeden czytał/zapisywał w danym momencie